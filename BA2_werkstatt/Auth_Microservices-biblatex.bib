
@article{de_almeida_authentication_2022,
	title = {Authentication and Authorization in Microservices Architecture: A Systematic Literature Review},
	volume = {12},
	rights = {http://creativecommons.org/licenses/by/3.0/},
	issn = {2076-3417},
	url = {https://www.mdpi.com/2076-3417/12/6/3023},
	doi = {10.3390/app12063023},
	shorttitle = {Authentication and Authorization in Microservices Architecture},
	abstract = {The microservice architectural style splits an application into small services, which are implemented independently, with their own deployment unit. This architecture can bring benefits, nevertheless, it also poses challenges, especially about security aspects. In this case, there are several microservices within a single system, it represents an increase in the exposure of the safety surface, unlike the monolithic style, there are several applications running independently and must be secured individually. In this architecture, microservices communicate with each other, sometimes in a trust relationship. In this way, unauthorized access to a specific microservice could compromise an entire system. Therefore, it brings a need to explore knowledge about issues of security in microservices, especially in aspects of authentication and authorization. In this work, a Systematic Literature Review is carried out to answer questions on this subject, involving aspects of the challenges, mechanisms and technologies that deal with authentication and authorization in microservices. It was found that there are few studies dealing with the subject, especially in practical order, however, there is a consensus that communication between microservices, mainly due to its individual and trustworthy characteristics, is a concern to be considered. To face the problems, mechanisms such as {OAuth} 2.0, {OpenID} Connect, {API} Gateway and {JWT} are used. Finally, it was found that there are few open-source technologies that implement the researched mechanisms, with some mentions of the Spring Framework.},
	pages = {3023},
	number = {6},
	journaltitle = {Applied Sciences},
	author = {de Almeida, Murilo Góes and Canedo, Edna Dias},
	urldate = {2022-09-21},
	date = {2022-01},
	langid = {english},
	note = {Number: 6
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {authentication, authorization, microservice, security, {SLR}},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\MXLQPVFM\\de Almeida und Canedo - 2022 - Authentication and Authorization in Microservices .pdf:application/pdf;Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\XAQUGL3V\\3023.html:text/html},
}

@inproceedings{billawa_sok_2022,
	title = {{SoK}: Security of Microservice Applications: A Practitioners' Perspective on Challenges and Best Practices},
	url = {http://arxiv.org/abs/2202.01612},
	doi = {10.1145/3538969.3538986},
	shorttitle = {{SoK}},
	abstract = {Cloud-based application deployment is becoming increasingly popular among businesses, thanks to the emergence of microservices. However, securing such architectures is a challenging task since traditional security concepts cannot be directly applied to microservice architectures due to their distributed nature. The situation is exacerbated by the scattered nature of guidelines and best practices advocated by practitioners and organizations in this field. In this research paper we aim to shay light over the current microservice security discussions hidden within Grey Literature ({GL}) sources. Particularly, we identify the challenges that arise when securing microservice architectures, as well as solutions recommended by practitioners to address these issues. For this, we conducted a systematic {GL} study on the challenges and best practices of microservice security present in the Internet with the goal of capturing relevant discussions in blogs, white papers, and standards. We collected 312 {GL} sources from which 57 were rigorously classified and analyzed. This analysis on the one hand validated past academic literature studies in the area of microservice security, but it also identified improvements to existing methodologies pointing towards future research directions.},
	pages = {1--10},
	booktitle = {Proceedings of the 17th International Conference on Availability, Reliability and Security},
	author = {Billawa, Priyanka and Tukaram, Anusha Bambhore and Ferreyra, Nicolás E. Díaz and Steghöfer, Jan-Philipp and Scandariato, Riccardo and Simhandl, Georg},
	urldate = {2022-09-21},
	date = {2022-08-23},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {2202.01612 [cs]},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering, D.4.6, grey survey},
	file = {Billawa et al. - 2022 - SoK Security of Microservice Applications A Prac.pdf:C\:\\Users\\urauc\\Zotero\\storage\\K28TDKP9\\Billawa et al. - 2022 - SoK Security of Microservice Applications A Prac.pdf:application/pdf},
}

@thesis{floren_implementation_2021,
	title = {Implementation and Analysis of Authentication and Authorization Methods in a Microservice Architecture: A Comparison Between Microservice Security Design Patterns for Authentication and Authorization Flows},
	abstract = {Microservices have emerged as an attractive alternative to more classical monolithic software application architectures. Microservices provides many benefits that help with code base comprehension, deployability, testability, and scalability. As the Information technology ({IT}) industry has grown ever larger, it makes sense for the technology giants to adopt the microservice architecture to make use of these benefits. However, with new software solutions come new security vulnerabilities, especially when the technology is new and vulnerabilities are yet to be fully mapped out. Authentication and authorization are the cornerstone of any application that has a multitude of users. However, due to the lack of studies of microservices, stemming from their relatively young age, there are no standardized design patterns for how authentication and authorization are best implemented in a microservice.},
	type = {phdthesis},
	author = {Florén, Simon Tran},
	date = {2021},
	langid = {english},
	keywords = {security patterns},
	file = {Florén - Implementation and Analysis of Authentication and .pdf:C\:\\Users\\urauc\\Zotero\\storage\\LFS7GPIC\\Florén - Implementation and Analysis of Authentication and .pdf:application/pdf},
}

@article{hannousse_securing_2021,
	title = {Securing microservices and microservice architectures: A systematic mapping study},
	volume = {41},
	issn = {1574-0137},
	url = {https://www.sciencedirect.com/science/article/pii/S1574013721000551},
	doi = {10.1016/j.cosrev.2021.100415},
	shorttitle = {Securing microservices and microservice architectures},
	abstract = {Microservice architectures ({MSA}) are becoming trending alternatives to existing software development paradigms notably for developing complex and distributed applications. Microservices emerged as an architectural design pattern aiming to address the scalability and ease the maintenance of online services. However, security breaches have increased threatening availability, integrity and confidentiality of microservice-based systems. A growing body of literature is found addressing security threats and security mechanisms to individual microservices and microservice architectures. The aim of this study is to provide a helpful guide to developers about already recognized threats on microservices and how they can be detected, mitigated or prevented; we also aim to identify potential research gaps on securing {MSA}. In this paper, we conduct a systematic mapping in order to categorize threats on {MSA} with their security proposals. Therefore, we extracted threats and details of proposed solutions reported in selected studies. Obtained results are used to design a lightweight ontology for security patterns of {MSA}. The ontology can be queried to identify source of threats, security mechanisms used to prevent each threat, applicability layer and validation techniques used for each mechanism. The systematic search yielded 1067 studies of which 46 are selected as primary studies. The results of the mapping revealed an unbalanced research focus in favor of external attacks; auditing and enforcing access control are the most investigated techniques compared with prevention and mitigation. Additionally, we found that most proposed solutions are soft-infrastructure applicable layer compared with other layers such as communication and deployment. We also found that performance analysis and case studies are the most used validation techniques of security proposals.},
	pages = {100415},
	journaltitle = {Computer Science Review},
	shortjournal = {Computer Science Review},
	author = {Hannousse, Abdelhakim and Yahiouche, Salima},
	urldate = {2022-09-21},
	date = {2021-08-01},
	langid = {english},
	keywords = {Security, Microservice architectures, Microservices, Systematic mapping},
	file = {Eingereichte Version:C\:\\Users\\urauc\\Zotero\\storage\\6T3VSDLJ\\Hannousse und Yahiouche - 2021 - Securing microservices and microservice architectu.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\EZC6GE9X\\S1574013721000551.html:text/html},
}

@article{chatterjee_sftsdh_2022,
	title = {{SFTSDH}: Applying Spring Security Framework With {TSD}-Based {OAuth}2 to Protect Microservice Architecture {APIs}},
	volume = {10},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2022.3165548},
	shorttitle = {{SFTSDH}},
	abstract = {The Internet of Medical Things ({IoMT}) combines medical devices and applications that use network technologies to connect healthcare information systems ({HIS}). {IoMT} is reforming the medical industry by adopting information and communication technologies ({ICTs}). Identity verification, secure collection, and exchange of medical data are essential in health applications. In this study, we implemented a hybrid security solution to secure the collection and management of personal health data using Spring Framework ({SF}), Services for Sensitive Data ({TSD}) as a service platform, and Hyper-Text-Transfer-Protocol ({HTTP} (H)) security methods. The adopted solution ({SFTSDH} = {SF} + {TSD} + H) instigated the following security features: identity brokering, {OAuth}2, multifactor authentication, and access control to protect the Microservices Architecture Application Programming Interfaces ({APIs}), following the General Data Protection Regulation ({GDPR}). Moreover, we extended the adopted security solution to develop a digital infrastructure to facilitate the research and innovation work in the electronic health ({eHealth}) section, focusing on solution validation with theoretical evaluation and experimental testing. We used a web engineering security methodology to achieve and explain the adopted security solution. As a case study, we designed and implemented electronic coaching ({eCoaching}) prototype system and deployed the same in the developed infrastructure to securely record and share personal health data. Furthermore, we compared the test results with related studies qualitatively for the efficient evaluation of the implemented security solution. The {SFTSDH} implementation and configuration in the prototype system have effectively secured the {eCoach} {APIs} from an attack in all the considered scenarios. The {eCoach} prototype with the {SFTSDH} solution effectively sustained a load of (≈) 1000 concurrent users in the developed digital health infrastructure. In addition, we performed a qualitative comparison among the following security solutions: {SF} security, third-party security, and {SFTSDH}, where {SFTSDH} showed a promising outcome.},
	pages = {41914--41934},
	journaltitle = {{IEEE} Access},
	author = {Chatterjee, Ayan and Gerdes, Martin W. and Khatiwada, Pankaj and Prinz, Andreas},
	date = {2022},
	note = {Conference Name: {IEEE} Access},
	keywords = {Security, Authentication, Protocols, {API} Security, {eCoach}, Electronic healthcare, {HTTP}, Medical services, {OAuth}2, Privacy, Prototypes, spring framework, {TSD}},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\8HVEGI76\\9751100.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\ICSQV59N\\Chatterjee et al. - 2022 - SFTSDH Applying Spring Security Framework With TS.pdf:application/pdf},
}

@online{fybish_authentication_2022,
	title = {Authentication in Microservices: Approaches and Techniques},
	url = {https://frontegg.com/blog/authentication-in-microservices},
	shorttitle = {Authentication in Microservices},
	abstract = {Authentication in microservices is becoming increasingly challenging. Learn about the latest approaches and techniques.},
	titleaddon = {Frontegg},
	author = {Fybish, Ron},
	urldate = {2022-09-21},
	date = {2022-02-03},
	langid = {american},
	keywords = {grey literature},
	file = {Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\6VTSDQTG\\authentication-in-microservices.html:text/html},
}

@book{newman_monolith_2020,
	title = {Monolith to Microservices. Evolutionary Patterns to Transform Your Monolith.},
	publisher = {O'Reilly},
	author = {Newman, Sam},
	date = {2020},
	langid = {english},
	file = {Newman - Monolith to Microservices.pdf:C\:\\Users\\urauc\\Zotero\\storage\\DDUYW9DH\\Newman - Monolith to Microservices.pdf:application/pdf},
}

@article{kholy_framework_2019,
	title = {Framework for Interaction Between Databases and Microservice Architecture},
	volume = {21},
	issn = {1520-9202, 1941-045X},
	url = {https://ieeexplore.ieee.org/document/8832289/},
	doi = {10.1109/MITP.2018.2889268},
	abstract = {Micro service architecture has revolutionized the landscape for the development of web and mobile applications alike. Due to the stateless nature and loose coupling involved in the design of micro services, native mobile applications can be developed by utilizing the same backend services which feed the inputs to the web application front ends. Extending the same concept, a plethora of automated devices, thanks to the advancements in the field of {IOT}, have come into existence which can feed on the same set of micro services. This concept of build once and utilize for many use cases has become a new norm in the enterprise design patterns. To handle the horizontal scalability needs of so many calling clients, significant advancements have been made on the containerization and their orchestration strategies on the public cloud platforms. However, scalable design techniques have led to the increased exposure of backend services to unwanted entities. This broadened the attack surface and also the risk. On top of it the mix of heterogeneous technologies in {MSA}, their distinct logging strategies, makes the central logging difficult, which in turn loosens the security. Additionally, the complexity around building the resilience for fault tolerance across the decentralized networks, adds to the security loop holes. The simple security designs which were once used with traditional web applications cannot be used for Microservice based applications. This paper articulates the innovative approaches of handling the security needs involved in protection of distributed services in Microservice architecture.},
	pages = {57--63},
	number = {5},
	journaltitle = {{IT} Professional},
	shortjournal = {{IT} Prof.},
	author = {Kholy, Mohamed El and Fatatry, Ahmed El},
	urldate = {2022-09-22},
	date = {2019-09-01},
	langid = {english},
	file = {Kholy und Fatatry - 2019 - Framework for Interaction Between Databases and Mi.pdf:C\:\\Users\\urauc\\Zotero\\storage\\6I5NF6TL\\Kholy und Fatatry - 2019 - Framework for Interaction Between Databases and Mi.pdf:application/pdf},
}

@article{berardi_microservice_2022,
	title = {Microservice security: a systematic literature review},
	volume = {8},
	issn = {2376-5992},
	url = {https://peerj.com/articles/cs-779},
	doi = {10.7717/peerj-cs.779},
	shorttitle = {Microservice security},
	abstract = {Microservices is an emerging paradigm for developing distributed systems. With their widespread adoption, more and more work investigated the relation between microservices and security. Alas, the literature on this subject does not form a well-defined corpus: it is spread over many venues and composed of contributions mainly addressing specific scenarios or needs. In this work, we conduct a systematic review of the field, gathering 290 relevant publications—at the time of writing, the largest curated dataset on the topic. We analyse our dataset along two lines: (a) quantitatively, through publication metadata, which allows us to chart publication outlets, communities, approaches, and tackled issues; (b) qualitatively, through 20 research questions used to provide an aggregated overview of the literature and to spot gaps left open. We summarise our analyses in the conclusion in the form of a call for action to address the main open challenges.},
	pages = {e779},
	journaltitle = {{PeerJ} Computer Science},
	shortjournal = {{PeerJ} Comput. Sci.},
	author = {Berardi, Davide and Giallorenzo, Saverio and Mauro, Jacopo and Melis, Andrea and Montesi, Fabrizio and Prandini, Marco},
	urldate = {2022-10-26},
	date = {2022-01-05},
	langid = {english},
	note = {Publisher: {PeerJ} Inc.},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\KMNGC4MK\\Berardi et al. - 2022 - Microservice security a systematic literature rev.pdf:application/pdf},
}

@article{abdelfattah_microservices_nodate,
	title = {Microservices Security Challenges and Approaches},
	abstract = {The fast-paced development cycles of microservices applications increase the probability of insufficient security tests in the development pipelines and consequent deployment of vulnerable microservices. The distribution and ephemeral of microservices create a discoverability challenge for traditional security assessment techniques, especially for microservices being dynamically launched and de-registered. To address this in applications and networks, continuous security assessments are used for vulnerability detection. Detected vulnerabilities are thereafter patched, essentially reducing the chances for security attacks. This paper illustrates the microservices architecture and its components from the security perspective. It investigates, summarizes, and highlights the microservices security-related challenges and the suggested approaches and proposals for facing them. It addresses the security impact on the different microservice architectural perspectives.},
	pages = {8},
	author = {Abdelfattah, Amr S and Cerny, Tomas},
	langid = {english},
	file = {Abdelfattah und Cerny - Microservices Security Challenges and Approaches.pdf:C\:\\Users\\urauc\\Zotero\\storage\\KKU678S7\\Abdelfattah und Cerny - Microservices Security Challenges and Approaches.pdf:application/pdf},
}

@inproceedings{de_o_junior_extensible_2022,
	title = {An Extensible and Secure Architecture based on Microservices},
	doi = {10.1109/ICCE53296.2022.9730757},
	abstract = {In the Internet of Things ({IoT}) scenario, the distributed cross-domain nature of microservices needs secure token service ({STS}), key management and encryption services for authentication and authorization, and secure communication protocols. Similarly, the nature of clustered containers (in which microservices are implemented) calls for secure service discovery. The availability requirement calls for: (a) resiliency techniques, such as load balancing, circuit breaking, and throttling, and (b) continuous monitoring (for the health of the service). The service mesh is the best-known approach that can facilitate the specification of these requirements at a level of abstraction such that it can be uniformly and consistently defined while also being effectively implemented without making changes to individual microservice code. The purpose of this work is to provide deployment guidance for a robust security infrastructure for supporting microservices-based applications.},
	eventtitle = {2022 {IEEE} International Conference on Consumer Electronics ({ICCE})},
	pages = {01--02},
	booktitle = {2022 {IEEE} International Conference on Consumer Electronics ({ICCE})},
	author = {de O. Júnior, Roberto S. and da Silva, Ruan C. A. and Santos, Marcelo Souza and Albuquerque, Danyllo W. and Almeida, Hyggo O. and Santos, Danilo F. S.},
	date = {2022-01},
	note = {{ISSN}: 2158-4001},
	keywords = {Encryption, Security, Protocols, Microservice architectures, Microservices, {API}, Authorization, Containers, Internet of Things, {JWT}, Load management, {OAuth}, Software Architecture, Software Design},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\LPW375GF\\9730757.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\N9AH87SY\\de O. Júnior et al. - 2022 - An Extensible and Secure Architecture based on Mic.pdf:application/pdf},
}

@article{dawei_design_2021,
	title = {Design and Achievement of Security Mechanism of {API} Gateway Platform Based on Microservice Architecture},
	volume = {1738},
	issn = {1742-6588, 1742-6596},
	url = {https://iopscience.iop.org/article/10.1088/1742-6596/1738/1/012046},
	doi = {10.1088/1742-6596/1738/1/012046},
	abstract = {To solve the current security problems of the microservice architecture, the security mechanism of the {API} gateway platform using the microservice platform is designed and implemented. To solve the corresponding security problems, a new {API} platform security mechanism is designed. In the data transmission, the hybrid encryption algorithm hybridized by encryption algorithm of Rivest Shamir Adleman ({RSA}) and encryption algorithm of Advanced Encryption Standard ({AES}) is used for data encryption. An {API} gateway between the client and the microservice is introduced as the only entrance for users to access the microservice, avoiding the complexity of the client logic caused by the direct communication between the client and the server. After the introduction of the {API} gateway, the {API}-level service operation authority can be controlled; the security of the front-end and back-end transmission data is improved without affecting the transmission performance. The algorithm designed takes longer time than the {AES} encryption algorithm, but shorter than the {RSA} encryption algorithm, which indicates that the time-consuming of the algorithm designed is acceptable, showing the feasibility of the algorithm. The content can provide an important theoretical basis for the security of {API} gateway platform of microservice architecture.},
	pages = {012046},
	number = {1},
	journaltitle = {Journal of Physics: Conference Series},
	shortjournal = {J. Phys.: Conf. Ser.},
	author = {Dawei, Yang and Yang, Gao and Wei, He and Kai, Li},
	urldate = {2022-10-26},
	date = {2021-01-01},
	langid = {english},
	file = {Dawei et al. - 2021 - Design and Achievement of Security Mechanism of AP.pdf:C\:\\Users\\urauc\\Zotero\\storage\\FKC47ZNM\\Dawei et al. - 2021 - Design and Achievement of Security Mechanism of AP.pdf:application/pdf},
}

@inproceedings{triartono_implementation_2019,
	title = {Implementation of Role-Based Access Control on {OAuth} 2.0 as Authentication and Authorization System},
	doi = {10.23919/EECSI48112.2019.8977061},
	abstract = {As today's technology transition from monolithic towards microservices architecture, the authentication and authorization system also becomes a new concern because of the difference between monolithic and microservices pattern. Monolithic mostly uses role-based access control while microservices uses scope with {OAuth} 2.0. With this in mind, there is a need for a model that can integrate {OAuth} 2.0 with role-based access control. With role-based access control implemented on {OAuth} 2.0, we expect a simpler authorization process and a more secure authentication and authorization system for microservices backend architecture. This paper proposes a model to implement role-based access control on {OAuth} 2.0 using Laravel framework, we also test the performance of the system following by response time, data transferred and throughput. From the performance test, this approach has a good performance and can handle certain requests with simulated users even with limited resources.},
	eventtitle = {2019 6th International Conference on Electrical Engineering, Computer Science and Informatics ({EECSI})},
	pages = {259--263},
	booktitle = {2019 6th International Conference on Electrical Engineering, Computer Science and Informatics ({EECSI})},
	author = {Triartono, Zehan and Negara, Ridha Muldina and {Sussi}},
	date = {2019-09},
	keywords = {Authentication, Microservices, Authorization, {OAuth} 2.0, Role-Based Access Control, Scope},
	file = {IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\U6GFPHBW\\Triartono et al. - 2019 - Implementation of Role-Based Access Control on OAu.pdf:application/pdf},
}

@inproceedings{singh_integration_2022,
	location = {Singapore},
	title = {Integration of Attribute-Based Access Control in Microservices Architecture},
	isbn = {9789811659874},
	doi = {10.1007/978-981-16-5987-4_69},
	series = {Lecture Notes in Networks and Systems},
	abstract = {Microservice is a software architecture with significant improvements over service-oriented architecture ({SOA}). The definition of microservices states that each service should perform only a single task, and hence, applications will have more services. As the number of services increases, different issues arise w.r.t testing, monitoring, governance, and security. When services communicate in microservices architecture, new challenges arise in areas like containers (deployment environment), data, permissions (authorization and authentication), and network. We will focus on permission issues related to authentication and authorization. Role-based access control ({RBAC}) model was used in microservices to ensure authorization. However, there are some security issues in {RBAC}, i.e., role explosion and segregation of duty. These issues also have an effect on the security policies of microservices. We aim to propose a solution to solve these problems by providing attribute-based access control for microservices architecture. We evaluate the performance of the proposed model by measuring metrics such as response time, throughput, and data transferred. From testing, it is proved that the system is reliable.},
	pages = {681--690},
	booktitle = {{ICT} Systems and Sustainability},
	publisher = {Springer Nature},
	author = {Singh, Amandeep and Raj, Vinay and Ravichandra, Sadam},
	editor = {Tuba, Milan and Akashe, Shyam and Joshi, Amit},
	date = {2022},
	langid = {english},
	keywords = {Microservices, Attribute-based access control, Role-based access control, Service-oriented architecture},
}

@misc{barabanov_authentication_2020,
	title = {Authentication and authorization in microservice-based systems: survey of architecture patterns},
	url = {http://arxiv.org/abs/2009.02114},
	doi = {10.48550/arXiv.2009.02114},
	shorttitle = {Authentication and authorization in microservice-based systems},
	abstract = {Context. Service-oriented architecture and its microservice-based approach increase an attack surface of applications. Exposed microservices become a pivot point for advanced persistent threats and completely change the threat landscape. Correctly implemented authentication and authorization architecture patterns are basis of any software maturity program. Objective. The aim of this study is to provide a helpful resource to application security architect and developers on existing architecture patterns to implement authentication and authorization in microservices-based systems. Method. In this paper, we conduct a review of major electronic databases and libraries as well as security standards and presentations at the major security conferences. Results. In this work based on research papers and major security conferences presentations analysis we identified industry best practices in authentication and authorization patterns and its applicability depending on environment characteristic. For each described patterns we reviewed its advantages and disadvantages that could be used as decision-making criteria for application security architects during architecture design phase.},
	number = {{arXiv}:2009.02114},
	publisher = {{arXiv}},
	author = {Barabanov, Alexander and Makrushin, Denis},
	urldate = {2022-11-16},
	date = {2020-09-04},
	eprinttype = {arxiv},
	eprint = {2009.02114 [cs]},
	keywords = {Computer Science - Cryptography and Security},
	file = {arXiv Fulltext PDF:C\:\\Users\\urauc\\Zotero\\storage\\XW5EQZR4\\Barabanov und Makrushin - 2020 - Authentication and authorization in microservice-b.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\STRY55VS\\2009.html:text/html},
}

@inproceedings{yang_research_2020,
	title = {Research on Unified Authentication and Authorization in Microservice Architecture},
	doi = {10.1109/ICCT50939.2020.9295931},
	abstract = {Microservice architecture reduces the coupling between application modules, which is conducive to the development, deployment and operation and maintenance of complex application systems. However, compared with the monolithic architecture, the access control of its resources becomes more complex. Based on the application scenario of enterprise system micro service architecture, aiming at the high security requirements of business system, through the analysis and research of micro service architecture, this paper designs a set of access control solution, which can meet the requirements of unified authentication, improving the efficiency of authority verification and accelerating the system development speed under the microservice architecture, which has reference for enterprise application system design significance.},
	eventtitle = {2020 {IEEE} 20th International Conference on Communication Technology ({ICCT})},
	pages = {1169--1173},
	booktitle = {2020 {IEEE} 20th International Conference on Communication Technology ({ICCT})},
	author = {Yang, {ShuLin} and Hu, {JiePing}},
	date = {2020-10},
	note = {{ISSN}: 2576-7828},
	keywords = {Security, Authentication, Servers, Authorization, Business, component, Logic gates, microservice architecture, oauth2, Public key, zuul},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\IRXJ8WT9\\9295931.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\Z74EYTU2\\ShuLin und JiePing - 2020 - Research on Unified Authentication and Authorizati.pdf:application/pdf},
}

@article{preuveneers_access_2017,
	title = {Access Control with Delegated Authorization Policy Evaluation for Data-Driven Microservice Workflows},
	volume = {9},
	rights = {http://creativecommons.org/licenses/by/3.0/},
	issn = {1999-5903},
	url = {https://www.mdpi.com/1999-5903/9/4/58},
	doi = {10.3390/fi9040058},
	abstract = {Microservices offer a compelling competitive advantage for building data flow systems as a choreography of self-contained data endpoints that each implement a specific data processing functionality. Such a ‘single responsibility principle’ design makes them well suited for constructing scalable and flexible data integration and real-time data flow applications. In this paper, we investigate microservice based data processing workflows from a security point of view, i.e., (1) how to constrain data processing workflows with respect to dynamic authorization policies granting or denying access to certain microservice results depending on the flow of the data; (2) how to let multiple microservices contribute to a collective data-driven authorization decision and (3) how to put adequate measures in place such that the data within each individual microservice is protected against illegitimate access from unauthorized users or other microservices. Due to this multifold objective, enforcing access control on the data endpoints to prevent information leakage or preserve one’s privacy becomes far more challenging, as authorization policies can have dependencies and decision outcomes cross-cutting data in multiple microservices. To address this challenge, we present and evaluate a workflow-oriented authorization framework that enforces authorization policies in a decentralized manner and where the delegated policy evaluation leverages feature toggles that are managed at runtime by software circuit breakers to secure the distributed data processing workflows. The benefit of our solution is that, on the one hand, authorization policies restrict access to the data endpoints of the microservices, and on the other hand, microservices can safely rely on other data endpoints to collectively evaluate cross-cutting access control decisions without having to rely on a shared storage backend holding all the necessary information for the policy evaluation.},
	pages = {58},
	number = {4},
	journaltitle = {Future Internet},
	author = {Preuveneers, Davy and Joosen, Wouter},
	urldate = {2022-11-16},
	date = {2017-12},
	langid = {english},
	note = {Number: 4
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {microservices, authorization, circuit breakers, data processing pipelines, feature toggles, policy-based access control, workflows},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\QJTV6HP3\\Preuveneers und Joosen - 2017 - Access Control with Delegated Authorization Policy.pdf:application/pdf;Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\JMCNFKME\\htm.html:text/html},
}

@inproceedings{nehme_fine-grained_2019,
	location = {Cham},
	title = {Fine-Grained Access Control for Microservices},
	isbn = {978-3-030-18419-3},
	doi = {10.1007/978-3-030-18419-3_19},
	series = {Lecture Notes in Computer Science},
	abstract = {Microservices-based applications are considered to be a promising paradigm for building large-scale digital systems due to their flexibility, scalability, and agility of development. To achieve the adoption of digital services, applications holding personal data must be secure while giving end-users as much control as possible. On the other hand, for software developers, the adoption of a security solution for microservices requires it to be easily adaptable to the application context and requirements while fully exploiting reusability of security components. This paper proposes a solution that targets key security challenges of microservice-based applications. Our approach relies on a coordination of security components, and offers a fine-grained access control in order to minimise the risks of token theft, session manipulation, and a malicious insider; it also renders the system resilient against confused deputy attacks. This solution is based on a combination of {OAuth} 2 and {XACML} open standards, and achieved through reusable security components integrated with microservices.},
	pages = {285--300},
	booktitle = {Foundations and Practice of Security},
	publisher = {Springer International Publishing},
	author = {Nehme, Antonio and Jesus, Vitor and Mahbub, Khaled and Abdallah, Ali},
	editor = {Zincir-Heywood, Nur and Bonfante, Guillaume and Debbabi, Mourad and Garcia-Alfaro, Joaquin},
	date = {2019},
	langid = {english},
	keywords = {Security, Microservices, Access control, Confused deputy attack, Gateways},
	file = {Akzeptierte Version:C\:\\Users\\urauc\\Zotero\\storage\\XIDZFQCF\\Nehme et al. - 2019 - Fine-Grained Access Control for Microservices.pdf:application/pdf},
}

@article{pereira-vale_security_2021,
	title = {Security in microservice-based systems: A Multivocal literature review},
	volume = {103},
	issn = {0167-4048},
	url = {https://www.sciencedirect.com/science/article/pii/S0167404821000249},
	doi = {10.1016/j.cose.2021.102200},
	shorttitle = {Security in microservice-based systems},
	abstract = {Microservices define an architectural style that conceives systems as a suite of modular, independent and scalable services. While application design is now simpler, designing secure applications is in general harder than for monolithic applications and the current literature offers little orientation to architects and developers regarding solutions. This article describes the design and results of a multivocal literature review of the security solutions that have been proposed for microservice-based systems. The study yielded 370 academic articles and 620 grey literature; duplicates removal and the application of exclusion criteria left 36 from the academic literature and 34 from the grey literature. The security solution(s) proposed in each article were classified into variations of standard security mechanisms (e.g., Access Control) and scopes (Info Management, Threat Modeling, etc), and were associated to security contexts (detect, mitigate/stop, react, recover from attack). Our research questions addressed frequency of publications, research methodologies, security mechanisms, and security contexts. Key findings were that (1) both kinds of literature differ in their preferred empirical research strategies (examples, experiments and case studies); (2) The solutions proposed in the 70 selected articles correspond to 15 classifications of security mechanisms and analyses; (3) the most mentioned security mechanisms are Authentication and Authorization; (4) around 2/3 of solutions focused on Mitigate/Stop attacks, but none on reacting and recovering from them, and (5) the methodologies used are mostly block diagrams and code, with little use of models or analysis. These findings hold for both grey and academic literature. This study is a first step towards providing secure software researchers and practitioners a comprehensive catalog of security solutions and mechanisms, and where the clear identification of the most used security solutions will simplify their reuse to address security problems while designing microservice-based systems.},
	pages = {102200},
	journaltitle = {Computers \& Security},
	shortjournal = {Computers \& Security},
	author = {Pereira-Vale, Anelis and Fernandez, Eduardo B. and Monge, Raúl and Astudillo, Hernán and Márquez, Gastón},
	urldate = {2022-11-18},
	date = {2021-04-01},
	langid = {english},
	keywords = {Microservice-based systems, Multivocal literature review, Secure software development, Security mechanisms, Security solutions},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\N2ZKIELW\\Pereira-Vale et al. - 2021 - Security in microservice-based systems A Multivoc.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\83D5MVSI\\S0167404821000249.html:text/html},
}

@misc{rudrabhatla_security_2020,
	title = {Security Design Patterns in Distributed Microservice Architecture},
	url = {http://arxiv.org/abs/2008.03395},
	doi = {10.48550/arXiv.2008.03395},
	abstract = {Micro service architecture has revolutionized the landscape for the development of web and mobile applications alike. Due to the stateless nature and loose coupling involved in the design of micro services, native mobile applications can be developed by utilizing the same backend services which feed the inputs to the web application front ends. Extending the same concept, a plethora of automated devices, thanks to the advancements in the field of {IOT}, have come into existence which can feed on the same set of micro services. This concept of build once and utilize for many use cases has become a new norm in the enterprise design patterns. To handle the horizontal scalability needs of so many calling clients, significant advancements have been made on the containerization and their orchestration strategies on the public cloud platforms. However, scalable design techniques have led to the increased exposure of backend services to unwanted entities. This broadened the attack surface and also the risk. On top of it the mix of heterogeneous technologies in {MSA}, their distinct logging strategies, makes the central logging difficult, which in turn loosens the security. Additionally, the complexity around building the resilience for fault tolerance across the decentralized networks, adds to the security loop holes. The simple security designs which were once used with traditional web applications cannot be used for Microservice based applications. This paper articulates the innovative approaches of handling the security needs involved in protection of distributed services in Microservice architecture.},
	number = {{arXiv}:2008.03395},
	publisher = {{arXiv}},
	author = {Rudrabhatla, Chaitanya K.},
	urldate = {2022-11-20},
	date = {2020-08-07},
	eprinttype = {arxiv},
	eprint = {2008.03395 [cs]},
	keywords = {Computer Science - Cryptography and Security},
	file = {arXiv Fulltext PDF:C\:\\Users\\urauc\\Zotero\\storage\\MG6HR738\\Rudrabhatla - 2020 - Security Design Patterns in Distributed Microservi.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\RG49Q5VP\\2008.html:text/html},
}

@article{bazeniuc_information_2021,
	title = {Information Security in Microservices Architectures},
	rights = {Attribution-{NonCommercial}-{NoDerivs} 3.0 United States},
	url = {http://repository.utm.md/handle/5014/20102},
	doi = {10.52326/ic-ecco.2021/SEC.03},
	abstract = {In this paper we investigate how can be provided security of an information system, which uses a microservice architecture. So, using of microservice architecture means that information system can be easily developed, deployed, and tested, but, on the other hand it means that it should be protected differently than the information system using monolith architecture. Firstly, a software architect should decide if each service should be protected separately or should be better to protect the system on the whole. Choosing the right way of protecting is very important, because, in some cases, protection of each service separately is not the best idea, as this could lead to code duplication. This means that, in case of necessity of changes a piece of code or fixing a bug it should be done everywhere this code appears. To avoid this, there are developed some services - so called gateways, which, also, very often have implemented the function of user/client authentication and authorization using protocol {OAuth} 2.0. Anyway, at each stage of development and implementation of a software product, it is necessary to solve many security related problems, and if it will not be done properly, then the company may incur enormous material losses or even may be closed.},
	author = {Bazeniuc, Ivan and Zgureanu, Aureliu},
	urldate = {2022-11-20},
	date = {2021},
	langid = {english},
	note = {Accepted: 2022-04-13T08:20:02Z
{ISBN}: 9789975426480
Publisher: Technical University of Moldova},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\FG3A5KDL\\Bazeniuc und Zgureanu - 2021 - Information Security in Microservices Architecture.pdf:application/pdf;Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\9ZDUUEVJ\\20102.html:text/html},
}

@report{hardt_oauth_nodate,
	title = {The {OAuth} 2.1 Authorization Framework},
	url = {https://datatracker.ietf.org/doc/draft-ietf-oauth-v2-1-04},
	abstract = {The {OAuth} 2.1 authorization framework enables a third-party application to obtain limited access to an {HTTP} service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and an authorization service, or by allowing the third-party application to obtain access on its own behalf. This specification replaces and obsoletes the {OAuth} 2.0 Authorization Framework described in {RFC} 6749.},
	number = {draft-ietf-oauth-v2-1-04},
	institution = {Internet Engineering Task Force},
	type = {Internet Draft},
	author = {Hardt, Dick and Parecki, Aaron and Lodderstedt, Torsten},
	urldate = {2022-11-20},
	note = {Num Pages: 85},
}

@report{sakimura_oauth_2021,
	title = {The {OAuth} 2.0 Authorization Framework: {JWT}-Secured Authorization Request ({JAR})},
	url = {https://datatracker.ietf.org/doc/rfc9101},
	shorttitle = {The {OAuth} 2.0 Authorization Framework},
	abstract = {The authorization request in {OAuth} 2.0 described in {RFC} 6749 utilizes query parameter serialization, which means that authorization request parameters are encoded in the {URI} of the request and sent through user agents such as web browsers. While it is easy to implement, it means that a) the communication through the user agents is not integrity protected and thus, the parameters can be tainted, b) the source of the communication is not authenticated, and c) the communication through the user agents can be monitored. Because of these weaknesses, several attacks to the protocol have now been put forward. This document introduces the ability to send request parameters in a {JSON} Web Token ({JWT}) instead, which allows the request to be signed with {JSON} Web Signature ({JWS}) and encrypted with {JSON} Web Encryption ({JWE}) so that the integrity, source authentication, and confidentiality properties of the authorization request are attained. The request can be sent by value or by reference.},
	number = {{RFC} 9101},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Sakimura, Nat and Bradley, John and Jones, Michael},
	urldate = {2022-11-20},
	date = {2021-08},
	doi = {10.17487/RFC9101},
	note = {Num Pages: 25},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\F5UWK7UR\\Sakimura et al. - 2021 - The OAuth 2.0 Authorization Framework JWT-Secured.pdf:application/pdf},
}

@article{mateus-coelho_security_2021,
	title = {Security in Microservices Architectures},
	volume = {181},
	issn = {1877-0509},
	url = {https://www.sciencedirect.com/science/article/pii/S1877050921003719},
	doi = {10.1016/j.procs.2021.01.320},
	series = {{CENTERIS} 2020 - International Conference on {ENTERprise} Information Systems / {ProjMAN} 2020 - International Conference on Project {MANagement} / {HCist} 2020 - International Conference on Health and Social Care Information Systems and Technologies 2020, {CENTERIS}/{ProjMAN}/{HCist} 2020},
	abstract = {A Microservice is a small or even micro independent process that communicates, acts, and returns via messages through lightweight mechanisms like Thrift, {HTTP} or {RESTAPI}. Microservices Architecture is amateur evolution of the Monolithic Architecture. Observing it in afunctional way, it is correct to claim that it breaks down complex applications into a simpler abstraction. As this research demonstrates, Microservices Architecture is intrinsically connected as a symbiosis with container-based deployment, because these containers have no need for embedded operating systems and calls are made for {OS} resources, via an application programming interface. It is safe to claim that this technology is currently the focus of modern developers nowadays. Semantically speaking, Microservices functionally deconstruct larger applications into smaller, discrete services, and containers are viewed as a natural compute platform for this architecture [1]. A single service is and can be represented by multiple containers in a Microservices cluster, each single service is designed to provide a specific set of functions while services act to makeup the entire application. It’s common in large application the decomposition into multiple arms of more than twenty services, although less can be commonly found as well [1]. The main objective of Microservices Architecture is to disassemble the core components of a given type of application [2]. This study could be done in multiple ways, all of them different because practically everybody has their specific way of looking at Microservices, but one aspect is the same cross mentalities, Security. So, the focus of this research is to expose the main security aspects of this specific architecture, in this cost-effective era.},
	pages = {1225--1236},
	journaltitle = {Procedia Computer Science},
	shortjournal = {Procedia Computer Science},
	author = {Mateus-Coelho, Nuno and Cruz-Cunha, Manuela and Ferreira, Luis Gonzaga},
	urldate = {2022-11-25},
	date = {2021-01-01},
	langid = {english},
	keywords = {microservices, security, {API}, architecture, hackers, monolithic, {REST}, web service},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\LUHI6N6U\\Mateus-Coelho et al. - 2021 - Security in Microservices Architectures.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\7YRAA5Z9\\S1877050921003719.html:text/html},
}

@report{lodderstedt_oauth_2022,
	title = {{OAuth} 2.0 Security Best Current Practice},
	url = {https://datatracker.ietf.org/doc/draft-ietf-oauth-security-topics},
	abstract = {This document describes best current security practice for {OAuth} 2.0. It updates and extends the {OAuth} 2.0 Security Threat Model to incorporate practical experiences gathered since {OAuth} 2.0 was published and covers new threats relevant due to the broader application of {OAuth} 2.0.},
	number = {draft-ietf-oauth-security-topics-21},
	institution = {Internet Engineering Task Force},
	type = {Internet Draft},
	author = {Lodderstedt, Torsten and Bradley, John and Labunets, Aney and Fett, Daniel},
	urldate = {2022-12-02},
	date = {2022-09-27},
	note = {Num Pages: 56},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\6WGETSBC\\Lodderstedt et al. - 2022 - OAuth 2.0 Security Best Current Practice.pdf:application/pdf},
}

@book{siriwardena_advanced_2020,
	location = {Berkeley, {CA}},
	title = {Advanced {API} Security: {OAuth} 2.0 and Beyond},
	isbn = {978-1-4842-2049-8 978-1-4842-2050-4},
	url = {http://link.springer.com/10.1007/978-1-4842-2050-4},
	shorttitle = {Advanced {API} Security},
	publisher = {Apress},
	author = {Siriwardena, Prabath},
	urldate = {2022-12-02},
	date = {2020},
	langid = {english},
	doi = {10.1007/978-1-4842-2050-4},
	keywords = {{OAuth}, {REST}, {API}'s, {IOT} Security, {JSON}, {JSON} Encrytption, {JSON} Seurity, {REST} Security, {SAML}, Securing {API}'s, User Managed Access ({UMA})},
	file = {Volltext:C\:\\Users\\urauc\\Zotero\\storage\\GJQNRF2B\\Siriwardena - 2020 - Advanced API Security OAuth 2.0 and Beyond.pdf:application/pdf},
}

@inproceedings{pasomsup_ht-rbac_2021,
	title = {{HT}-{RBAC}: A Design of Role-based Access Control Model for Microservice Security Manager},
	doi = {10.1109/BDEE52938.2021.00038},
	shorttitle = {{HT}-{RBAC}},
	abstract = {For transitioning to a decentralized system, a microservices platform has become popular in today software development due to its lightweight mechanisms. However, increasing the number of services results in a challenge to maintain the security of access control. The more attack surfaces can bring security and privacy risk via sensitive data. Therefore, a chain of trust domains was introduced to solve this problem. The extended Role-Based Access Control model (Hierarchical Trust {RBAC}: {HT}-{RBAC}) for microservice security managers is proposed for leveraging threats of unauthorized access to sensitive information and identity verification across all environments in application container solutions. This paper proposes using an {HT}-{RBAC} to authenticate, authorize, and identify user’s access control via {API}-Gateway. A prototype system integrated with {OAuth} 2.0 authentication server is implemented for empirical study. The results report that the approach provides faster and more flexible access to information in addition to improving incident response time.},
	eventtitle = {2021 International Conference on Big Data Engineering and Education ({BDEE})},
	pages = {177--181},
	booktitle = {2021 International Conference on Big Data Engineering and Education ({BDEE})},
	author = {Pasomsup, Chittipat and Limpiyakorn, Yachai},
	date = {2021-08},
	keywords = {microservices, Microservice architectures, Prototypes, Containers, Access control, Data privacy, Education, identity management, {IT} security, role-based access control, Software},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\Z83RFJNR\\9626304.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\QGMU4P99\\Pasomsup und Limpiyakorn - 2021 - HT-RBAC A Design of Role-based Access Control Mod.pdf:application/pdf},
}

@article{chatterjee_applying_2022,
	title = {Applying Spring Security Framework with {KeyCloak}-Based {OAuth}2 to Protect Microservice Architecture {APIs}: A Case Study},
	volume = {22},
	rights = {http://creativecommons.org/licenses/by/3.0/},
	issn = {1424-8220},
	url = {https://www.mdpi.com/1424-8220/22/5/1703},
	doi = {10.3390/s22051703},
	shorttitle = {Applying Spring Security Framework with {KeyCloak}-Based {OAuth}2 to Protect Microservice Architecture {APIs}},
	abstract = {In this study, we implemented an integrated security solution with Spring Security and Keycloak open-access platform ({SSK}) to secure data collection and exchange over microservice architecture application programming interfaces ({APIs}). The adopted solution implemented the following security features: open authorization, multi-factor authentication, identity brokering, and user management to safeguard microservice {APIs}. Then, we extended the security solution with a virtual private network ({VPN}), Blowfish and crypt (Bcrypt) hash, encryption method, {API} key, network firewall, and secure socket layer ({SSL}) to build up a digital infrastructure. To accomplish and describe the adopted {SSK} solution, we utilized a web engineering security method. As a case study, we designed and developed an electronic health coaching ({eCoach}) prototype system and hosted the system in the expanded digital secure infrastructure to collect and exchange personal health data over microservice {APIs}. We further described our adopted security solution’s procedural, technical, and practical considerations. We validated our {SSK} solution implementation by theoretical evaluation and experimental testing. We have compared the test outcomes with related studies qualitatively to determine the efficacy of the hybrid security solution in digital infrastructure. The {SSK} implementation and configuration in the {eCoach} prototype system has effectively secured its microservice {APIs} from an attack in all the considered scenarios with 100\% accuracy. The developed digital infrastructure with {SSK} solution efficiently sustained a load of (≈)300 concurrent users. In addition, we have performed a qualitative comparison among the following security solutions: Spring-based security, Keycloak-based security, and their combination (our utilized hybrid security solution), where {SSK} showed a promising outcome.},
	pages = {1703},
	number = {5},
	journaltitle = {Sensors},
	author = {Chatterjee, Ayan and Prinz, Andreas},
	urldate = {2022-12-04},
	date = {2022-01},
	langid = {english},
	note = {Number: 5
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {authentication, authorization, {API}, {REST}, encryption, external attacks, Keycloak, spring-boot},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\YCD7XVPE\\Chatterjee und Prinz - 2022 - Applying Spring Security Framework with KeyCloak-B.pdf:application/pdf;Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\4U7W275M\\1703.html:text/html},
}

@book{siriwardena_microservices_2020,
	location = {Shelter Island, {NY}},
	title = {Microservices security in action},
	isbn = {978-1-61729-595-9},
	abstract = {Microservices Security in Action teaches you how to address microservices-specific security challenges throughout the system. This practical guide includes plentiful hands-on exercises using industry-leading open-source tools and examples using Java and Spring Boot},
	pagetotal = {588},
	publisher = {Manning Publications Co},
	author = {Siriwardena, Prabath and Dias, Nuwan},
	date = {2020},
	langid = {english},
	note = {{OCLC}: on1190759452},
	keywords = {Computer networks, Business, Application software, Computer architecture, Data processing Security measures, Development, Distributed operating systems (Computers), Security measures, Software architecture},
	file = {Siriwardena und Dias - 2020 - Microservices security in action.pdf:C\:\\Users\\urauc\\Zotero\\storage\\EVWHH9TX\\Siriwardena und Dias - 2020 - Microservices security in action.pdf:application/pdf},
}

@inproceedings{banati_authentication_2018,
	title = {Authentication and authorization orchestrator for microservice-based software architectures},
	doi = {10.23919/MIPRO.2018.8400214},
	abstract = {Nowadays the demand for cloud and {IT} services is gaining more and more popularity, therefore, the various {IT} solutions which implement them need to face some challenges. More and more intensive user activities require the use of well-scalable and distributed solutions which (from software technology point of view) disassembles classical monolithic architectures into microarchitectures. Consequently, instead of one or a few well-determined application-level points of access, the system must provide many points of access for the users and the other parts of the application involving many authentication and authorization processes. Moreover, the number and the location of these points of access are constantly changing during the running time implying new challenges in the security and the management field. One of the solutions is to give an encrypted token (typically implemented by a {JSON} Web Token) to the users after their logins which will be attached to each query. In this paper we develop an authentication and authorization orchestrator for the microservices which can manage the tokens (create and delete) needed to the authentication and authorization of the users. The orchestrator service contains a client {API} to provide the necessary information for the microservice in Java environment without the modification of the original application.},
	eventtitle = {2018 41st International Convention on Information and Communication Technology, Electronics and Microelectronics ({MIPRO})},
	pages = {1180--1184},
	booktitle = {2018 41st International Convention on Information and Communication Technology, Electronics and Microelectronics ({MIPRO})},
	author = {Bánáti, A. and Kail, E. and Karóczkai, K. and Kozlovszky, M.},
	date = {2018-05},
	keywords = {Authentication, authentication, authorization, Authorization, microservice architecture, Standards},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\SE5QJXMZ\\8400214.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\7K7I7B5J\\Bánáti et al. - 2018 - Authentication and authorization orchestrator for .pdf:application/pdf},
}

@article{leines-vite_information_2021,
	title = {Information and Communication Security Mechanisms For Microservices-based Systems},
	volume = {13},
	issn = {09752307},
	url = {https://aircconline.com/ijnsa/V13N6/13621ijnsa07.pdf},
	doi = {10.5121/ijnsa.2021.13607},
	abstract = {Security has become paramount in modern software services as more and more security breaches emerge, impacting final users and organizations alike. Trends like the Microservice Architecture bring new security challenges related to communication, system design, development, and operation. The literature presents a plethora of security-related solutions for microservices-based systems, but the spread of information difficult practitioners' adoption of novel security related solutions. In this study, we aim to present a catalogue and discussion of security solutions based on algorithms, protocols, standards, or implementations; supporting principles or characteristics of information security, considering the three possible states of data, according to the {McCumber} Cube. Our research follows a Systematic Literature Review, synthesizing the results with a meta-aggregation process. We identified a total of 30 primary studies, yielding 75 security solutions for the communication of microservices.},
	pages = {85--103},
	number = {6},
	journaltitle = {International Journal of Network Security \& Its Applications},
	shortjournal = {{IJNSA}},
	author = {Leines-Vite, Lenin and Pérez-Arriaga, Juan Carlos and Limón, Xavier},
	urldate = {2022-12-05},
	date = {2021-11-30},
	langid = {english},
	file = {Leines-Vite et al. - 2021 - Information and Communication Security Mechanisms .pdf:C\:\\Users\\urauc\\Zotero\\storage\\IJRMRGGS\\Leines-Vite et al. - 2021 - Information and Communication Security Mechanisms .pdf:application/pdf},
}

@article{nguyen_bmdd_2022,
	title = {{BMDD}: a novel approach for {IoT} platform (broker-less and microservice architecture, decentralized identity, and dynamic transmission messages)},
	volume = {8},
	issn = {2376-5992},
	url = {https://peerj.com/articles/cs-950},
	doi = {10.7717/peerj-cs.950},
	shorttitle = {{BMDD}},
	abstract = {Undeniably, Internet of Things ({IoT}) devices are gradually getting better over time; and {IoT}-based systems play a significant role in our lives. The pervasiveness of the new essential service models is expanding, and includes self-driving cars, smart homes, smart cities, as well as promoting the development of some traditional fields such as agriculture, healthcare, and transportation; the development of {IoT} devices has not shown any sign of cooling down. On the one hand, several studies are coming up with many scenarios for {IoT} platforms, but some critical issues related to performance, speed, power consumption, availability, security, and scalability are not yet fully resolved. On the other hand, {IoT} devices are manufactured and developed by different organizations and individuals; hence, there is no unified standard (uniformity of {IoT} devices), i.e., sending and receiving messages among them and between them and the upper layer (e.g., edge devices). To address these issues, this paper proposes an {IoT} Platform called {BMDD} (Broker-less and Microservice architecture, Decentralized identity, and Dynamic transmission messages) that has a combination of two architectural models, including broker-less and microservices, with cutting-edge technologies such as decentralized identity and dynamic message transmission. The main contributions of this article are five-fold, including: (i) proposing broker-less and microservice for the {IoT} platform which can reduce single failure point of brokering architecture, easy to scale out and improve failover; (ii) providing a decentralized authentication mechanism which is suitable for {IoT} devices attribute (i.e., mobility, distributed); (iii) applying the Role-Based Access Control ({RBAC}) model for the authorization process; (iv) exploiting the {gRPC} protocol combined with the Kafka message queue enhances transmission rates, transmission reliability, and reduces power consumption in comparison with {MQTT} protocol; and (v) developing a dynamic message transmission mechanism that helps users communicate with any device, regardless of the manufacturer, since it provides very high homogeneity.},
	pages = {e950},
	journaltitle = {{PeerJ} Computer Science},
	shortjournal = {{PeerJ} Comput. Sci.},
	author = {Nguyen, Lam Tran Thanh and Ha, Son Xuan and Le, Trieu Hai and Luong, Huong Hoang and Vo, Khanh Hong and Nguyen, Khoi Huynh Tuan and Nguyen, Anh The and Dao, Tuan Anh and Nguyen, Hy Vuong Khang},
	urldate = {2022-12-05},
	date = {2022-04-22},
	langid = {english},
	note = {Publisher: {PeerJ} Inc.},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\EP8ISA7B\\Nguyen et al. - 2022 - BMDD a novel approach for IoT platform (broker-le.pdf:application/pdf;Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\LPZCJSZX\\cs-950.html:text/html},
}

@inproceedings{yarygina_overcoming_2018,
	title = {Overcoming Security Challenges in Microservice Architectures},
	doi = {10.1109/SOSE.2018.00011},
	abstract = {The microservice architectural style is an emerging trend in software engineering that allows building highly scalable and flexible systems. However, current state of the art provides only limited insight into the particular security concerns of microservice system. With this paper, we seek to unravel some of the mysteries surrounding microservice security by: providing a taxonomy of microservices security; assessing the security implications of the microservice architecture; and surveying related contemporary solutions, among others Docker Swarm and Netflix security decisions. We offer two important insights. On one hand, microservice security is a multi-faceted problem that requires a layered security solution that is not available out of the box at the moment. On the other hand, if these security challenges are solved, microservice architectures can improve security; their inherent properties of loose coupling, isolation, diversity, and fail fast all contribute to the increased robustness of a system. To address the lack of security guidelines this paper describes the design and implementation of a simple security framework for microservices that can be leveraged by practitioners. Proof-of-concept evaluation results show that the performance overhead of the security mechanisms is around 11\%.},
	eventtitle = {2018 {IEEE} Symposium on Service-Oriented System Engineering ({SOSE})},
	pages = {11--20},
	booktitle = {2018 {IEEE} Symposium on Service-Oriented System Engineering ({SOSE})},
	author = {Yarygina, Tetiana and Bagge, Anya Helene},
	date = {2018-03},
	keywords = {Security, authentication, Microservices, {JWT}, Service-oriented architecture, {REST}, Cloud computing, Computer architecture, cloud, defense in depth, distributed systems, Hardware, Industries, {MTLS}, {PKI}, {SOA}},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\U7B8RUGU\\8359144.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\CKPBSBYU\\Yarygina und Bagge - 2018 - Overcoming Security Challenges in Microservice Arc.pdf:application/pdf},
}

@article{jin_secure_2020,
	title = {Secure Edge Computing Management Based on Independent Microservices Providers for Gateway-Centric {IoT} Networks},
	volume = {8},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2020.3030297},
	abstract = {Edge computing is an emerging computing paradigm that distributes the computational capability to the edge of networks for enabling the computation near to the environment where the sensors and actuators are deployed. Therefore, from the network edge, heterogeneous solutions can be provided to the Internet based on sufficient computing ability. Nevertheless, computing and networking resources are constrained for devices in the network edge. Providing secure services from edge computing is a challenge based on constrained resources. In this paper, we propose a secure edge computing to provide management of device, data, user and additional services based on deploying independent microservices providers with a security gateway on an edge gateway. The edge gateway is the hub of a local network where multiple {IoT} devices are deployed to interact with the physical environment for sensing and actuating. The gateway provides the management functionalities through microservices based on multiple independent server modules. Each gateway-centric local network has a standalone management service based on the gateway. For providing secure edge computing services through the edge gateway, a security gateway is deployed on the proposed edge gateway to provide Representational State Transfer Application Programming Interfaces to expose the security services to the Internet instead of microservices from management modules. Moreover, a client support gateway is deployed in the edge gateway to provide services of User Interface and access forwarding based on web sessions to support user authentication and authorization with the security gateway. Based on the proposed edge gateway including client support and security gateway, {IoT} clients and {IoT} devices are enabled to communicate for providing secure edge services of access and visualization to users.},
	pages = {187975--187990},
	journaltitle = {{IEEE} Access},
	author = {Jin, Wenquan and Xu, Rongxu and You, Taewan and Hong, Yong-Geun and Kim, Dohyeun},
	date = {2020},
	note = {Conference Name: {IEEE} Access},
	keywords = {Security, Servers, microservices, security, Internet of Things, Logic gates, Cloud computing, {API} gateway, device, edge computing, Edge computing, edge gateway, management},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\Q39C82XR\\9220881.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\HKS2LNPQ\\Jin et al. - 2020 - Secure Edge Computing Management Based on Independ.pdf:application/pdf},
}

@article{nguyen_applying_2019,
	title = {Applying Spring Security Framework and {OAuth}2 To Protect Microservice Architecture {API}},
	issn = {1796217X},
	url = {http://www.jsoftware.us/index.php?m=content&c=index&a=show&catid=208&id=2948},
	doi = {10.17706/jsw.14.6.257-264},
	abstract = {Since 2014, Microservice Architecture ({MSA}) has been widely applied and deployed by big companies such as Google, Netflix and Twitter. This is a way of architecting software systems in which the services of a single application are decomposed then deployed and executed separately. This research examines the possibility of applying Spring Security Framework and {OAuth}2 to secure microservice {APIs} which are built on top of Spring Framework. By developing a Proof of Concept ({POC}) of an Inventory Management System using {MSA} on top of Spring Framework, Spring Security Framework and {OAuth}2. we have conducted security tests over the {POC} using unit testing and manual testing techniques to examine if there are any vulnerabilities and we were able to show and confirm the effectiveness of the Spring Security Framework and {OAuth}2 in securing Spring-based {APIs}.},
	pages = {257--264},
	journaltitle = {Journal of Software},
	shortjournal = {{JSW}},
	author = {Nguyen, Quy and Baker, Oras},
	urldate = {2022-12-05},
	date = {2019-06},
	langid = {english},
	file = {Southern Institute of Technology, Invercargill, New Zealand. et al. - 2019 - Applying Spring Security Framework and OAuth2 To P.pdf:C\:\\Users\\urauc\\Zotero\\storage\\BDXKGU6E\\Southern Institute of Technology, Invercargill, New Zealand. et al. - 2019 - Applying Spring Security Framework and OAuth2 To P.pdf:application/pdf},
}

@article{xu_microservice_2019,
	title = {Microservice Security Agent Based On {API} Gateway in Edge Computing},
	volume = {19},
	rights = {http://creativecommons.org/licenses/by/3.0/},
	issn = {1424-8220},
	url = {https://www.mdpi.com/1424-8220/19/22/4905},
	doi = {10.3390/s19224905},
	abstract = {Internet of Things ({IoT}) devices are embedded with software, electronics, and sensors, and feature connectivity with constrained resources. They require the edge computing paradigm, with modular characteristics relying on microservices, to provide an extensible and lightweight computing framework at the edge of the network. Edge computing can relieve the burden of centralized cloud computing by performing certain operations, such as data storage and task computation, at the edge of the network. Despite the benefits of edge computing, it can lead to many challenges in terms of security and privacy issues. Thus, services that protect privacy and secure data are essential functions in edge computing. For example, the end user’s ownership and privacy information and control are separated, which can easily lead to data leakage, unauthorized data manipulation, and other data security concerns. Thus, the confidentiality and integrity of the data cannot be guaranteed and, so, more secure authentication and access mechanisms are required to ensure that the microservices are exposed only to authorized users. In this paper, we propose a microservice security agent to integrate the edge computing platform with the {API} gateway technology for presenting a secure authentication mechanism. The aim of this platform is to afford edge computing clients a practical application which provides user authentication and allows {JSON} Web Token ({JWT})-based secure access to the services of edge computing. To integrate the edge computing platform with the {API} gateway, we implement a microservice security agent based on the open-source Kong in the {EdgeX} Foundry framework. Also to provide an easy-to-use approach with Kong, we implement {REST} {APIs} for generating new consumers, registering services, configuring access controls. Finally, the usability of the proposed approach is demonstrated by evaluating the round trip time ({RTT}). The results demonstrate the efficiency of the system and its suitability for real-world applications.},
	pages = {4905},
	number = {22},
	journaltitle = {Sensors},
	author = {Xu, Rongxu and Jin, Wenquan and Kim, Dohyeun},
	urldate = {2022-12-05},
	date = {2019-01},
	langid = {english},
	note = {Number: 22
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {authentication, microservice, Internet of Things, {API} Gateway, edge computing},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\G683X57L\\Xu et al. - 2019 - Microservice Security Agent Based On API Gateway i.pdf:application/pdf;Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\6BGBG57I\\4905.html:text/html},
}

@article{kramer_implementing_2019,
	title = {Implementing secure applications in smart city clouds using microservices},
	volume = {99},
	issn = {0167-739X},
	url = {https://www.sciencedirect.com/science/article/pii/S0167739X18304539},
	doi = {10.1016/j.future.2019.04.042},
	abstract = {Smart Cities make use of {ICT} technology to address the challenges of modern urban management. The cloud provides an efficient and cost-effective platform on which they can manage, store and process data, as well as build applications performing complex computations and analyses. The quickly changing requirements in a Smart City require flexible software architectures that let these applications scale in a distributed environment such as the cloud. Smart Cities have to deal with huge amounts of data including sensitive information about infrastructure and citizens. In order to leverage the benefits of the cloud, in particular in terms of scalability and cost-effectiveness, this data should be stored in a public cloud. However, in such an environment, sensitive data needs to be encrypted to prevent unauthorized access. In this paper, we present a software architecture design that can be used as a template for the implementation of Smart City applications. The design is based on the microservice architectural style, which provides properties that help make Smart City applications scalable and flexible. In addition, we present a hybrid approach to securing sensitive data in the cloud. Our architecture design combines a public cloud with a trusted private environment. To store data in a cost-effective manner in the public cloud, we encrypt metadata items with {CP}-{ABE} (Ciphertext-Policy Attribute-Based Encryption) and actual Smart City data with symmetric encryption. This approach allows data to be shared across multiple administrations and makes efficient use of cloud resources. We show the applicability of our design by implementing a web-based application for urban risk management. We evaluate our architecture based on qualitative criteria, benchmark the performance of our security approach, and discuss it regarding honest-but-curious cloud providers as well as attackers trying to access user data through eavesdropping. Our findings indicate that the microservice architectural style fits the requirements of scalable Smart City applications while the proposed security approach helps prevent unauthorized access.},
	pages = {308--320},
	journaltitle = {Future Generation Computer Systems},
	shortjournal = {Future Generation Computer Systems},
	author = {Krämer, Michel and Frese, Sven and Kuijper, Arjan},
	urldate = {2022-12-05},
	date = {2019-10-01},
	langid = {english},
	keywords = {Security, Cloud computing, Software architecture, Geospatial information systems, Urban management},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\WDUVTEHW\\Krämer et al. - 2019 - Implementing secure applications in smart city clo.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\5BNG7MBI\\S0167739X18304539.html:text/html},
}

@article{jander_defense--depth_2018,
	title = {Defense-in-depth and Role Authentication for Microservice Systems},
	volume = {130},
	issn = {1877-0509},
	url = {https://www.sciencedirect.com/science/article/pii/S1877050918304009},
	doi = {10.1016/j.procs.2018.04.047},
	series = {The 9th International Conference on Ambient Systems, Networks and Technologies ({ANT} 2018) / The 8th International Conference on Sustainable Energy Information Technology ({SEIT}-2018) / Affiliated Workshops},
	abstract = {Microservices are a widely deployed pattern for implementing large-scale distributed systems. However, in order to harden the overall system and when crossing datacenter boundaries, the authenticity and confidentiality of microservice calls have to be secured even for internal calls. Since most microservice systems employ {HTTP}-based approaches, {TLS} communication is usually used to secure the communication channels. However, {TLS} by itself provides only link-level security. Authentication options are limited or alternatively must be implemented in the application code. As a result, microservice systems often lack proper defense in depth. In this paper we present how standard cryptographic primitives can be combined to provide a flexible communication system providing a high level of security even when easy to manage low-entropy authentication secrets are used. Furthermore, the approach provides encryption, forward secrecy and protection against replay attacks even for out-of-order communication.},
	pages = {456--463},
	journaltitle = {Procedia Computer Science},
	shortjournal = {Procedia Computer Science},
	author = {Jander, Kai and Braubach, Lars and Pokahr, Alexander},
	urldate = {2022-12-05},
	date = {2018-01-01},
	langid = {english},
	keywords = {Encryption, Security, Authentication, Microservices, Confidentiality},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\M6WJRCJD\\Jander et al. - 2018 - Defense-in-depth and Role Authentication for Micro.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\X67AXP5B\\S1877050918304009.html:text/html},
}

@article{jander_defense--depth_2018-1,
	title = {Defense-in-depth and Role Authentication for Microservice Systems},
	volume = {130},
	issn = {1877-0509},
	url = {https://www.sciencedirect.com/science/article/pii/S1877050918304009},
	doi = {https://doi.org/10.1016/j.procs.2018.04.047},
	abstract = {Microservices are a widely deployed pattern for implementing large-scale distributed systems. However, in order to harden the overall system and when crossing datacenter boundaries, the authenticity and confidentiality of microservice calls have to be secured even for internal calls. Since most microservice systems employ {HTTP}-based approaches, {TLS} communication is usually used to secure the communication channels. However, {TLS} by itself provides only link-level security. Authentication options are limited or alternatively must be implemented in the application code. As a result, microservice systems often lack proper defense in depth. In this paper we present how standard cryptographic primitives can be combined to provide a flexible communication system providing a high level of security even when easy to manage low-entropy authentication secrets are used. Furthermore, the approach provides encryption, forward secrecy and protection against replay attacks even for out-of-order communication.},
	pages = {456--463},
	journaltitle = {Procedia Computer Science},
	author = {Jander, Kai and Braubach, Lars and Pokahr, Alexander},
	date = {2018},
	keywords = {Encryption, Security, Authentication, Microservices, Confidentiality},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\FM4SDH6Z\\Elsevier Enhanced Reader.pdf:application/pdf},
}

@article{yu_survey_2019,
	title = {A survey on security issues in services communication of Microservices-enabled fog applications},
	volume = {31},
	issn = {1532-0634},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.4436},
	doi = {10.1002/cpe.4436},
	abstract = {Fog computing is used as a popular extension of cloud computing for a variety of emerging applications. To incorporate various design choices and customized policies in fog computing paradigm, Microservices is proposed as a new software architecture, which is easy to modify and quick to deploy fog applications because of its significant features, ie, fine granularity and loose coupling. Unfortunately, the Microservices architecture is vulnerable due to its wildly distributed interfaces that are easily attacked. However, the industry has not been fully aware of its security issues. In this paper, a survey of different security risks that pose a threat to the Microservices-based fog applications is presented. Because a fog application based on Microservices architecture consists of numerous services and communication among services is frequent, we focus on the security issues that arise in services communication of Microservices in four aspects: containers, data, permission, and network. Containers are often used as the deployment and operational environment for Microservices. Data is communicated among services and is vital for every enterprise. Permission is the guarantee of services security. Network security is the foundation for secure communication. Finally, we propose an ideal solution for security issues in services communication of Microservices-based fog applications.},
	pages = {e4436},
	number = {22},
	journaltitle = {Concurrency and Computation: Practice and Experience},
	author = {Yu, Dongjin and Jin, Yike and Zhang, Yuqun and Zheng, Xi},
	urldate = {2022-12-08},
	date = {2019},
	langid = {english},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.4436},
	keywords = {security, Microservices, container, data, network, permission},
	file = {Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\9DPICE97\\cpe.html:text/html},
}

@inproceedings{lu_secure_2017,
	title = {A Secure Microservice Framework for {IoT}},
	doi = {10.1109/SOSE.2017.27},
	abstract = {The Internet of Things ({IoT}) has connected an incredible diversity of devices in novel ways, which has enabled exciting new services and opportunities. Unfortunately, {IoT} systems also present several important challenges to developers. This paper proposes a vision for how we may build {IoT} systems in the future by reconceiving {IoT}'s fundamental unit of construction not as a "thing", but rather as a widely and finely distributed "microservice" already familiar to web service engineering circles. Since {IoT} systems are quite different from more established uses of microservice architectures, success of the approach depends on adaptations that enable them to met the key challenges that {IoT} systems present. We argue that a microservice approach to building {IoT} systems can combine in a mutually enforcing way with patterns for microservices, {API} gateways, distribution of services, uniform service discovery, containers, and access control. The approach is illustrated using two case studies of {IoT} systems in personal health management and connected autonomous vehicles. Our hope is that the vision of a microservices approach will help focus research that can fill in current gaps preventing more effective, interoperable, and secure {IoT} services and solutions in a wide variety of contexts.},
	eventtitle = {2017 {IEEE} Symposium on Service-Oriented System Engineering ({SOSE})},
	pages = {9--18},
	booktitle = {2017 {IEEE} Symposium on Service-Oriented System Engineering ({SOSE})},
	author = {Lu, Duo and Huang, Dijiang and Walenstein, Andrew and Medhi, Deep},
	date = {2017-04},
	keywords = {Medical services, Containers, Access control, Cloud computing},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\LM8VF893\\7943286.html:text/html},
}

@article{salibindla_microservices_2018,
	title = {Microservices {API} Security},
	volume = {7},
	issn = {2278-0181},
	url = {https://www.ijert.org/research/microservices-api-security-IJERTV7IS010137.pdf, https://www.ijert.org/microservices-api-security},
	doi = {10.17577/IJERTV7IS010137},
	abstract = {Microservices {API} Security - written by Jyothi Salibindla published on 2018/01/25 download full article with reference data and citations},
	number = {1},
	journaltitle = {International Journal of Engineering Research \& Technology},
	author = {Salibindla, Jyothi},
	urldate = {2022-12-10},
	date = {2018-01-25},
	langid = {american},
	note = {Publisher: {IJERT}-International Journal of Engineering Research \& Technology},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\DTZBEC3Y\\Salibindla - 2018 - Microservices API Security.pdf:application/pdf},
}

@online{noauthor_oauthcom_nodate,
	title = {{OAuth}.com},
	url = {https://www.oauth.com/},
	abstract = {{OAuth} 2.0 is the modern standard for securing access to {APIs}. {OAuth} 2.0 Simplified is a guide to building an {OAuth} 2.0 server. Through high-level},
	titleaddon = {{OAuth} 2.0 Simplified},
	urldate = {2022-12-12},
	langid = {american},
	file = {Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\CHAVLVN8\\www.oauth.com.html:text/html},
}

@report{hardt_oauth_2012,
	title = {The {OAuth} 2.0 Authorization Framework},
	url = {https://datatracker.ietf.org/doc/rfc6749},
	abstract = {The {OAuth} 2.0 authorization framework enables a third-party application to obtain limited access to an {HTTP} service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the {HTTP} service, or by allowing the third-party application to obtain access on its own behalf. This specification replaces and obsoletes the {OAuth} 1.0 protocol described in {RFC} 5849. [{STANDARDS}-{TRACK}]},
	number = {{RFC} 6749},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Hardt, Dick},
	urldate = {2022-12-12},
	date = {2012-10},
	doi = {10.17487/RFC6749},
	note = {Num Pages: 76},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\MRT45T3G\\Hardt - 2012 - The OAuth 2.0 Authorization Framework.pdf:application/pdf},
}

@online{richer_end_nodate,
	title = {End User Authentication with {OAuth} 2.0 — {OAuth}},
	url = {https://oauth.net/articles/authentication/},
	author = {Richer, Justin},
	urldate = {2022-12-12},
	file = {End User Authentication with OAuth 2.0 — OAuth:C\:\\Users\\urauc\\Zotero\\storage\\9FKPEWK8\\authentication.html:text/html},
}

@inproceedings{guija_identity_2018,
	location = {New York, {NY}, {USA}},
	title = {Identity and Access Control for micro-services based 5G {NFV} platforms},
	isbn = {978-1-4503-6448-5},
	url = {https://doi.org/10.1145/3230833.3233255},
	doi = {10.1145/3230833.3233255},
	series = {{ARES} 2018},
	abstract = {The intrinsic use of {SDN}/{NFV} technologies in 5G infrastructures promise to enable the flexibility and programmability of networks to ensure lower cost of network and service provisioning and operation, however it brings new challenges and requirements due to new architectural changes. In terms of security, authentication and authorization functions need to evolve towards the new and emerging 5G virtualization platforms in order to meet the requirements of service providers and infrastructure operators. Over the years, a lot of authentication techniques have been used. Now, a wide range of options arise allowing to extend existing authentication and authorization mechanisms. This paper focuses on proposing and showcasing a 5G platform oriented solution among different approaches to integrate authentication and authorization functionalities, an adapted secure and stateless mechanism, providing identity and permissions management to handle not only users, but also system micro-services, in a network functions virtualization management and orchestration ({NFV} {MANO}) system, oriented to deploy virtualized services. The presented solution uses the {NFV}-based {SONATA} Service Platform which offers capabilities for a continuous integration and delivery {DevOps} methodology that allow high levels of programmability and flexibility to manage the entire life cycle of Virtual Network Functions, and enables the perfect scenario to showcase different approaches for authentication and authorization mechanisms for users and micro-services in a 5G platform.},
	pages = {1--10},
	booktitle = {Proceedings of the 13th International Conference on Availability, Reliability and Security},
	publisher = {Association for Computing Machinery},
	author = {Guija, Daniel and Siddiqui, Muhammad Shuaib},
	urldate = {2022-12-13},
	date = {2018-08-27},
	keywords = {Authentication, Authorization, Keycloak, 5G, {DevOps}, identity, {JSON} Web Token, micro-services, network services, {NFV} {MANO}, virtual network functions},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\QBQJQKB2\\Guija und Siddiqui - 2018 - Identity and Access Control for micro-services bas.pdf:application/pdf},
}

@article{nehme_securing_2019,
	title = {Securing Microservices},
	volume = {21},
	issn = {1941-045X},
	doi = {10.1109/MITP.2018.2876987},
	abstract = {Microservices have drawn significant interest in recent years and are now successfully finding their way into different areas, from enterprise {IT} and the Internet of Things to critical applications. This paper discusses how microservices can be secured at different levels and stages considering a common software development lifecycle.},
	pages = {42--49},
	number = {1},
	journaltitle = {{IT} Professional},
	author = {Nehme, Antonio and Jesus, Vitor and Mahbub, Khaled and Abdallah, Ali},
	date = {2019-01},
	note = {Conference Name: {IT} Professional},
	keywords = {Security, Service-oriented architecture, Logic gates, Product life cycle management, Software development management},
	file = {Akzeptierte Version:C\:\\Users\\urauc\\Zotero\\storage\\EV23B433\\Nehme et al. - 2019 - Securing Microservices.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\Z2XKKK67\\8657392.html:text/html},
}

@inproceedings{baker_novel_2020,
	title = {A novel approach to secure microservice architecture from owasp vulnerabilities},
	booktitle = {Proceedings of the 10th Annual Conference of Computing and Information Technology Education and Research in New Zealand},
	author = {Baker, Oras and Nguyen, Quy},
	date = {2020-11-18},
}

@inproceedings{torkura_integrating_2017,
	location = {Austin Texas {USA}},
	title = {Integrating Continuous Security Assessments in Microservices and Cloud Native Applications},
	isbn = {978-1-4503-5149-2},
	url = {https://dl.acm.org/doi/10.1145/3147213.3147229},
	doi = {10.1145/3147213.3147229},
	abstract = {Microservice Architecture ({MSA}) is a new emerging computing and software engineering paradigm. The services of the application can be developed using different programming languages. {MSA} not only helps to increase the scalability and availability of the application, but it also provides the developer with flexibility in selecting programming languages and development model for every single service. Even though, this architectural style poses many challenges to application security since each service in the system communicates with the others over the network through the Application Programming Interface. In this research, we propose a guide for the architecture and the security implementation of the microservices that are developed using Spring Framework and Spring Security Framework. Moreover, the testing results in this research allows business and the software engineers to use Spring Security Framework in combination with {OAuth}2 protocol to secure their Spring-based {APIs} with confidence from The Open Web Application Security Project vulnerabilities.},
	eventtitle = {{UCC} '17: 10th International Conference on Utility and Cloud Computing},
	pages = {171--180},
	booktitle = {Proceedings of the10th International Conference on Utility and Cloud Computing},
	publisher = {{ACM}},
	author = {Torkura, Kennedy A. and Sukmana, Muhammad I.H. and Meinel, Christoph},
	urldate = {2022-12-14},
	date = {2017-12-05},
	langid = {english},
	file = {Torkura et al. - 2017 - Integrating Continuous Security Assessments in Mic.pdf:C\:\\Users\\urauc\\Zotero\\storage\\4G25XG86\\Torkura et al. - 2017 - Integrating Continuous Security Assessments in Mic.pdf:application/pdf},
}

@report{erturk_2020_2020,
	title = {2020 {CITRENZ} Conference Book. Proceedings of the 10th Annual Conference of Computing and Information Technology Education and Research in New Zealand},
	url = {https://osf.io/93q6c},
	abstract = {This is a copy of the 2020 Conference Proceedings available at https://www.citrenz.ac.nz/2020-proceedings/ Additionally, the website also has the posters. Editor: Dr. Emre Erturk. The Editorial Board is listed in this document. {CITRENZ} is in its 11th year, with the predecessor {NACCQ} going back 33 years. It is a highly influential annual conference: https://www.citrenz.ac.nz/proceedings-index/ This year, the event was held under the auspices of {IT} Professionals {NZ} (the largest body of {IT} professionals and educators), and completely online due to travel restrictions: https://itx.nz/{CITRENZConference}},
	institution = {{EdArXiv}},
	type = {preprint},
	author = {Erturk, Emre},
	urldate = {2022-12-14},
	date = {2020-11-18},
	langid = {english},
	doi = {10.35542/osf.io/93q6c},
	file = {Erturk - 2020 - 2020 CITRENZ Conference Book.pdf:C\:\\Users\\urauc\\Zotero\\storage\\7R8LT53S\\Erturk - 2020 - 2020 CITRENZ Conference Book.pdf:application/pdf},
}

@inproceedings{thanh_embedding_2016,
	title = {Embedding security and privacy into the development and operation of cloud applications and services},
	doi = {10.1109/NETWKS.2016.7751149},
	abstract = {This paper introduces an approach allowing cloud application developers, service providers to consider security and privacy requirements across the application lifecycle. Specifically, a {DevOps} framework has been described that took into account several emerging technologies such as Network Functions Virtualization ({NFV}) and Microservice Pattern Design. As an illustration, a proof-of-concept application in the healthcare domain is presented to support such direction.},
	eventtitle = {2016 17th International Telecommunications Network Strategy and Planning Symposium (Networks)},
	pages = {31--36},
	booktitle = {2016 17th International Telecommunications Network Strategy and Planning Symposium (Networks)},
	author = {Thanh, Tran Quang and Covaci, Stefan and Magedanz, Thomas and Gouvas, Panagiotis and Zafeiropoulos, Anastasios},
	date = {2016-09},
	keywords = {Security, Privacy, Cloud computing, Microservice, Computer architecture, Cloud Computing, Context, Measurement, {NFV}},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\HRYXJKW8\\7751149.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\VN8SKC7H\\Thanh et al. - 2016 - Embedding security and privacy into the developmen.pdf:application/pdf},
}

@online{otemuyiwa_brute_nodate,
	title = {Brute Forcing {HS}256 is Possible: The Importance of Using Strong Keys in Signing {JWTs}},
	url = {https://auth0.com/blog/brute-forcing-hs256-is-possible-the-importance-of-using-strong-keys-to-sign-jwts/},
	shorttitle = {Brute Forcing {HS}256 is Possible},
	abstract = {Cracking a {JWT} signed with weak keys is possible via brute force attacks. Learn how Auth0 protects against such attacks and alternative J...},
	titleaddon = {Auth0 - Blog},
	author = {Otemuyiwa, Prosper},
	urldate = {2022-12-17},
	langid = {english},
	file = {Snapshot:C\:\\Users\\urauc\\Zotero\\storage\\GHPMSS8Q\\brute-forcing-hs256-is-possible-the-importance-of-using-strong-keys-to-sign-jwts.html:text/html},
}

@inproceedings{preuveneers_towards_2019,
	title = {Towards Multi-party Policy-based Access Control in Federations of Cloud and Edge Microservices},
	doi = {10.1109/EuroSPW.2019.00010},
	abstract = {The development and deployment of microservices and containers come with a promise of flexibility by embracing heterogeneity and reducing the amount of communication and coordination between service teams. However, when such software ecosystems are developed in large organizations with a high degree of independence, and deployed in the cloud and at the edge, security becomes a non-trivial concern. The challenge that we address in this work is the delegated management of access control decisions to multiple stakeholders in continuously evolving federations of cloud and edge microservices. To ensure that user-centric access control remains sustainable in such complex service delivery models, we present a dynamic granular access control solution on top of different authorization frameworks. By leveraging microservice technologies, our solution is flexible, scalable, and contextual, and can adhere to the security needs of different stakeholders in microservice federations - from {DevOps} teams to common end-users - with the necessary agility to respond to exceptional security circumstances.},
	eventtitle = {2019 {IEEE} European Symposium on Security and Privacy Workshops ({EuroS}\&{PW})},
	pages = {29--38},
	booktitle = {2019 {IEEE} European Symposium on Security and Privacy Workshops ({EuroS}\&{PW})},
	author = {Preuveneers, Davy and Joosen, Wouter},
	date = {2019-06},
	keywords = {microservices, authorization, policy-based access control, edge, federation},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\urauc\\Zotero\\storage\\SNGVG276\\8802382.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\GS8YYWUT\\Preuveneers und Joosen - 2019 - Towards Multi-party Policy-based Access Control in.pdf:application/pdf},
}

@report{jones_oauth_2012,
	title = {The {OAuth} 2.0 Authorization Framework: Bearer Token Usage},
	url = {https://datatracker.ietf.org/doc/rfc6750},
	shorttitle = {The {OAuth} 2.0 Authorization Framework},
	abstract = {This specification describes how to use bearer tokens in {HTTP} requests to access {OAuth} 2.0 protected resources. Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport. [{STANDARDS}-{TRACK}]},
	number = {{RFC} 6750},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Jones, Michael and Hardt, Dick},
	urldate = {2022-12-18},
	date = {2012-10},
	doi = {10.17487/RFC6750},
	note = {Num Pages: 18},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\X7M34KYE\\Jones und Hardt - 2012 - The OAuth 2.0 Authorization Framework Bearer Toke.pdf:application/pdf},
}

@video{barbettini_nate_oauth_2018,
	title = {{OAuth} 2.0 and {OpenID} Connect (in plain English)},
	url = {https://www.youtube.com/watch?v=996OiexHze0},
	author = {{Barbettini, Nate}},
	urldate = {2022-12-18},
	date = {2018-02-05},
}

@video{jackson_nic_microservice_2019,
	title = {Microservice Authentication and Authorization},
	url = {https://www.youtube.com/watch?v=ZjPF8yZ83Wo},
	author = {{Jackson, Nic}},
	urldate = {2022-12-18},
	date = {2019-02-15},
}

@online{noauthor_final_nodate,
	title = {Final: {OpenID} Connect Core 1.0 incorporating errata set 1},
	url = {https://openid.net/specs/openid-connect-core-1_0.html},
	urldate = {2022-12-19},
	file = {Final\: OpenID Connect Core 1.0 incorporating errata set 1:C\:\\Users\\urauc\\Zotero\\storage\\C879SMHJ\\openid-connect-core-1_0.html:text/html},
}

@report{denniss_oauth_2019,
	title = {{OAuth} 2.0 Device Authorization Grant},
	url = {https://datatracker.ietf.org/doc/rfc8628},
	abstract = {The {OAuth} 2.0 device authorization grant is designed for Internet- connected devices that either lack a browser to perform a user-agent- based authorization or are input constrained to the extent that requiring the user to input text in order to authenticate during the authorization flow is impractical. It enables {OAuth} clients on such devices (like smart {TVs}, media consoles, digital picture frames, and printers) to obtain user authorization to access protected resources by using a user agent on a separate device.},
	number = {{RFC} 8628},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Denniss, William and Bradley, John and Jones, Michael and Tschofenig, Hannes},
	urldate = {2022-12-19},
	date = {2019-08},
	doi = {10.17487/RFC8628},
	note = {Num Pages: 21},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\AFLLJF6X\\Denniss et al. - 2019 - OAuth 2.0 Device Authorization Grant.pdf:application/pdf},
}

@online{parecki_oauth_nodate,
	title = {{OAuth} Community Site},
	url = {https://oauth.net/},
	author = {Parecki, Aaron},
	urldate = {2022-12-19},
	file = {OAuth Community Site:C\:\\Users\\urauc\\Zotero\\storage\\7VXQFGRT\\oauth.net.html:text/html},
}

@report{jones_json_2015,
	title = {{JSON} Web Token ({JWT})},
	url = {https://datatracker.ietf.org/doc/rfc7519},
	abstract = {{JSON} Web Token ({JWT}) is a compact, {URL}-safe means of representing claims to be transferred between two parties. The claims in a {JWT} are encoded as a {JSON} object that is used as the payload of a {JSON} Web Signature ({JWS}) structure or as the plaintext of a {JSON} Web Encryption ({JWE}) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code ({MAC}) and/or encrypted.},
	number = {{RFC} 7519},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Jones, Michael and Bradley, John and Sakimura, Nat},
	urldate = {2022-12-19},
	date = {2015-05},
	doi = {10.17487/RFC7519},
	note = {Num Pages: 30},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\JZHB65LU\\Jones et al. - 2015 - JSON Web Token (JWT).pdf:application/pdf},
}

@report{bertocci_json_2021,
	title = {{JSON} Web Token ({JWT}) Profile for {OAuth} 2.0 Access Tokens},
	url = {https://datatracker.ietf.org/doc/rfc9068},
	abstract = {This specification defines a profile for issuing {OAuth} 2.0 access tokens in {JSON} Web Token ({JWT}) format. Authorization servers and resource servers from different vendors can leverage this profile to issue and consume access tokens in an interoperable manner.},
	number = {{RFC} 9068},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Bertocci, Vittorio},
	urldate = {2022-12-19},
	date = {2021-10},
	doi = {10.17487/RFC9068},
	note = {Num Pages: 15},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\YPJ5AAQB\\Bertocci - 2021 - JSON Web Token (JWT) Profile for OAuth 2.0 Access .pdf:application/pdf},
}

@report{jones_json_2015-1,
	title = {{JSON} Web Encryption ({JWE})},
	url = {https://datatracker.ietf.org/doc/rfc7516},
	abstract = {{JSON} Web Encryption ({JWE}) represents encrypted content using {JSON}-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate {JSON} Web Algorithms ({JWA}) specification and {IANA} registries defined by that specification. Related digital signature and Message Authentication Code ({MAC}) capabilities are described in the separate {JSON} Web Signature ({JWS}) specification.},
	number = {{RFC} 7516},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Jones, Michael and Hildebrand, Joe},
	urldate = {2022-12-20},
	date = {2015-05},
	doi = {10.17487/RFC7516},
	note = {Num Pages: 51},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\QRZ3X9FA\\Jones und Hildebrand - 2015 - JSON Web Encryption (JWE).pdf:application/pdf},
}

@report{jones_json_2015-2,
	title = {{JSON} Web Signature ({JWS})},
	url = {https://datatracker.ietf.org/doc/rfc7515},
	abstract = {{JSON} Web Signature ({JWS}) represents content secured with digital signatures or Message Authentication Codes ({MACs}) using {JSON}-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate {JSON} Web Algorithms ({JWA}) specification and an {IANA} registry defined by that specification. Related encryption capabilities are described in the separate {JSON} Web Encryption ({JWE}) specification.},
	number = {{RFC} 7515},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Jones, Michael and Bradley, John and Sakimura, Nat},
	urldate = {2022-12-20},
	date = {2015-05},
	doi = {10.17487/RFC7515},
	note = {Num Pages: 59},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\X854HUYA\\Jones et al. - 2015 - JSON Web Signature (JWS).pdf:application/pdf},
}

@report{jones_oauth_2020,
	title = {{OAuth} 2.0 Token Exchange},
	url = {https://datatracker.ietf.org/doc/rfc8693},
	abstract = {This specification defines a protocol for an {HTTP}- and {JSON}-based Security Token Service ({STS}) by defining how to request and obtain security tokens from {OAuth} 2.0 authorization servers, including security tokens employing impersonation and delegation.},
	number = {{RFC} 8693},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Jones, Michael and Nadalin, Anthony and Campbell, Brian and Bradley, John and Mortimore, Chuck},
	urldate = {2022-12-20},
	date = {2020-01},
	doi = {10.17487/RFC8693},
	note = {Num Pages: 27},
	file = {Full Text PDF:C\:\\Users\\urauc\\Zotero\\storage\\C7V64R5U\\Jones et al. - 2020 - OAuth 2.0 Token Exchange.pdf:application/pdf},
}
