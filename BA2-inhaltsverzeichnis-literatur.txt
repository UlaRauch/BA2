# Arbeitstitel: Comparing Microservices (Edge-Level) Authentication Patterns: Backend For Frontend (Gateway als Client) Authentication
	and Edge-Level API Gateway (Frontend als OIDC-Client, Gateway als Resource Server) Pattern for Securing Microservices

Beide Patterns werden anscheinend häufig eingesetzt und tauchen in vielen Beispielen und Tutorials auf
(oft ist auch nicht klar, was gemeint ist, weil Beispiele stark vereinfacht sind und Frontend ignoriert wird)
Was sind Vor- und Nachteile der beiden Patterns?

Prototyp in beiden Varianten implementieren mit Teapot-Projekt
Vergleich von Performance (Loadtesting mit JMeter), Security (Literatur, Tests soweit einfach machbar)
und Einfachheit/Komplexität der Implementierung

Leon:
Intro passt
Technologies and Frameworks vorerst überspringen
Methodology kurz - evt. in Intro integrieren
Projektbeschreibung + jmeter-setup unter Implementation
statische codeanalyse: Sonarqube

Achtung: was noch fehlt:
Wohin kommt der ganze OAuth2/OIDC teil? Introduction wird sehr fett dadurch und Implementation finde ich ein bissl spät dafür


## Abbreviations

MTLS


## 1. Introduction

	### related work
	
	### Microservice-based vs. Monolithic Architecture

	### Microservices Security Challenges

	### Authentication and Authorization

	### Authentication Patterns
		-> Diagramme
	
	### Methodology

## 4. Implementation (switch mit Methodology?)
	spring boot
	keycloak
	Docker

	Prototype:
		high-level design:
	- Diagramme aller versionen

	Setup (code):
		IntelliJ -> Spring Boot -> Maven Dependencies
		properties.yml/application.properties
		SecurityConfig

	Performance tests with JMeter:
		- Testplans
		- Powershell Script
		Problems
	Wireshark Captures

## 4. Results (vorher Evaluation)

	### Performance
		LoadTesting with JMeter
		Response Times
		Graphen hier
		Response Times per number of active Threads -bemerkung dazu?

	Wireshark
		captures hier + Erklärung

	### Metrics:
	Abspecken!
	(gesehen bei Alkhodary - lieber nur einen Teil davon, wenn zu aufwändig)

		- Coupling (between services)
		- Lines of Code
		- Cyclomatic Complexity Metric (CCM)
		- Halstead Complexity Metric (HCM)


	### Security

		Abspecken!
		STRIDE Table, aber nicht alles abarbeiten, z.B. nur identitätsbezogene

		Problem: Aufwand unklar

		Postman Screenshots, Tabelle(n)



## 5. Discussion (vorher Results -> in Results integrieren?

## 6. Conclusion
	Future work etc.
	
## Literatur
- Alkhodary, Samer: The Evaluation of Using Backend-For-Frontend in a Microservices Environment (Master's Thesis). 2023 https://lup.lub.lu.se/luur/download?func=downloadFile&recordOId=9086847&fileOId=9086853
- Barabanov, Alexander, and Denis Makrushin: Authentication and authorization in microservice-based systems: survey of architecture patterns. 2020. https://arxiv.org/abs/2009.02114
- Rattanukul, Pattarakrit et al.: Microusity: A testing tool for Backends for Frontends (BFF) Microservice Systems. 2023 http://arxiv.org/abs/2302.11150
- Zdun, Uwe, et al.: Microservice Security Metrics for Secure Communication, Identity Management, and Observability. 2023 https://dl.acm.org/doi/full/10.1145/3532183#d1e3643
- Waseem, Muhammad, et al.: Design, monitoring, and testing of microservices systems: The practitioners’ perspective. 2021  https://www.sciencedirect.com/science/article/pii/S0164121221001588?casa_token=45GWMMRmxTEAAAAA:e_tiEkmLB0umqDJ53MILNNG483O4-HGD0zHKwYSrHVFrt7tV3MeNmG48anw9yI-rIdA-cT7TsYs
- Siriwardena, Prabath, and Nuwan Dias: Microservices Security in Action. Manning, 2020.
- weitere Literatur aus BA1

Alt:
## 2. Technologies and Frameworks - 
	
	Beschreibung von Technologien, die in meinem Projekt eingesetzt werden. Alternativ in jeweilige Abschnitte unter Introduction integrieren?

	### Spring Boot and Spring Security

		inkl. Spring Cloud Gateway? Yes!

	### Eureka Discovery Service - WEG
	
	### MongoDB? - relevant?

	### Oauth2 and OpenID Connect

	### Keycloak

	### Docker and Docker Compose
	
	### JMeter
	
	### (Wireshark)

	### Weitere?

